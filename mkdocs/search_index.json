{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to MkDocs\n\n\nFor full documentation visit \nmkdocs.org\n.\n\n\nCommands\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\n\n\nProject layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-mkdocs", 
            "text": "For full documentation visit  mkdocs.org .", 
            "title": "Welcome to MkDocs"
        }, 
        {
            "location": "/#commands", 
            "text": "mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.", 
            "title": "Commands"
        }, 
        {
            "location": "/#project-layout", 
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "Project layout"
        }, 
        {
            "location": "/reference/", 
            "text": "VTL Reference\n\n\nLexical structure\n\n\nIdentifier\n\n\nComments\n\n\nWhite space\n\n\nLiterals\n\n\nNumbers, String, Dates, Periods etc.\n\n\nData types\n\n\nany\n\n\nScalars\n\n\nscalar\n\n\nintegers\n\n\ninteger\ninteger [a:]\ninteger [:b]\ninteger [a:b]\ninteger {x1, ..., xn}\n\n\nfloat\n\n\nnull\n\n\nnumber\n\n\nboolean\n\n\ndate\n\n\nstrings\n\n\nstring [a]\nstring [a:b]\nstring {s1, ..., sn}\n\n\nCollections\n\n\nlist\n\n\nset\n\n\ncollection\n\n\nDatasets\n\n\nRecord\n\n\nProduct\n\n\nFunction\n\n\n()\n\n\nJoin expressions\n\n\nInner join\n\n\n\n    \n\ninnerJoin := [inner left, right] {\n    filter true\n}\n    \n\n    \n\nid[I,String],measure[M,String],attribute[A,String]\n3,left value 3, left attribute 3\n4,left value 4, left attribute 4\n5,left value 5, left attribute 5\n6,left value 6, left attribute 6\n    \n\n    \n\nid[I,String],measure[M,String],attribute[A,String]\n1,right value 1, right attribute 1\n2,right value 2, right attribute 2\n3,right value 3, right attribute 3\n4,right value 4, right attribute 4\n    \n\n    \n\n\n\n\n\nOuter join\n\n\n\n    \n\nouterJoin := [outer left, right] {\n    filter true\n}\n    \n\n    \n\nid1[I,String],id2[I,String],measure[M,String],attribute[A,String]\n1,3,left value 3, left attribute 3\n1,4,left value 4, left attribute 4\n1,5,left value 5, left attribute 5\n1,6,left value 6, left attribute 6\n    \n\n    \n\nid1[I,String],id2[I,String],measure[M,String],attribute[A,String]\n1,1,right value 1, right attribute 1\n1,2,right value 2, right attribute 2\n1,3,right value 3, right attribute 3\n1,4,right value 4, right attribute 4\n    \n\n    \n\n\n\n\n\nFold clause\n\n\nFold transposes a single data point of the input Dataset into several\ndata points. It adds Identifier dim and measure msr to the resulting\nDataset, inserts into the resulting Dataset a data point for each value\nA in the element list and assigns to the inserted data point dim = A and\nmsr = value of measure A in the input Dataset.\n\n\nWhen measure A is null then fold does not create a data point for that\nmeasure. Note that in general unfolding and folding are not exactly\nsymmetric operations, i.e. in some cases the fold operation applied to\nthe unfolded Dataset does not recreate exactly the original Dataset\n(before unfolding).\n\n\n\n    \n\nfolded := [population] {\n    fold '0-14', '15-24', '25-64', '65+' to age, percent\n}\n    \n\n    \n\ncountry[I,String],0-14[M,String],15-24[M,String],25-64[M,String],65+[M,String]\nFrance ,18.1%,12.2%,51.0%,18.7%\nNorway ,18.6%,13.0%,52.0%,16.4%\nItaly  ,14.0%,9.8%,54.4%,21.7%\nSweden ,17.3%,12.2%,50.5%,20.0%\n    \n\n    \n\n\n\n\n\nUnfold\n\n\n\n    \n\nfolded := [colors] {\n    unfold color, wavelength to \"indigo\", \"blue\", \"yellow\"\n}\n    \n\n    \n\ncolor[I,String],wavelength[M,String]\nblue, 475nm\nindigo, 445nm\norange, 570nm\nred, 650nm\nviolet, 400 nm\nyellow, 510nm\n    \n\n    \n\n\n\n\n\nCheck operators\n\n\nThe check operators are used to validate data sets. Three check operator\n variants are available, check with rule sets, check with hierarchical\n rule sets and check with single boolean rule.\n\n\nThe return value of the check function depend of parameters.\nWhen used with the parameter \"condition\", the resulting dataset will only\n contain a condition measure of type Boolean indicating if the DataPoint\n is valid according to the rule set, hierarchical rule set or boolean\n expression.\nWith the parameter \"measures\", the resulting dataset contains all the\nmeasures of the input dataset.\n\n\nCheck with single rule\n\n\n\n    \n\nfolded := check(data.valid \n \"na\")\n    \n\n    \n\ncountry[I,String],population[M,String]\nFrance , 64M\nNorway , 5M\nItaly  , na\nSweden , 9M", 
            "title": "Reference"
        }, 
        {
            "location": "/reference/#vtl-reference", 
            "text": "", 
            "title": "VTL Reference"
        }, 
        {
            "location": "/reference/#lexical-structure", 
            "text": "", 
            "title": "Lexical structure"
        }, 
        {
            "location": "/reference/#identifier", 
            "text": "", 
            "title": "Identifier"
        }, 
        {
            "location": "/reference/#comments", 
            "text": "", 
            "title": "Comments"
        }, 
        {
            "location": "/reference/#white-space", 
            "text": "", 
            "title": "White space"
        }, 
        {
            "location": "/reference/#literals", 
            "text": "Numbers, String, Dates, Periods etc.", 
            "title": "Literals"
        }, 
        {
            "location": "/reference/#data-types", 
            "text": "", 
            "title": "Data types"
        }, 
        {
            "location": "/reference/#any", 
            "text": "", 
            "title": "any"
        }, 
        {
            "location": "/reference/#scalars", 
            "text": "", 
            "title": "Scalars"
        }, 
        {
            "location": "/reference/#scalar", 
            "text": "", 
            "title": "scalar"
        }, 
        {
            "location": "/reference/#integers", 
            "text": "integer\ninteger [a:]\ninteger [:b]\ninteger [a:b]\ninteger {x1, ..., xn}", 
            "title": "integers"
        }, 
        {
            "location": "/reference/#float", 
            "text": "", 
            "title": "float"
        }, 
        {
            "location": "/reference/#null", 
            "text": "", 
            "title": "null"
        }, 
        {
            "location": "/reference/#number", 
            "text": "", 
            "title": "number"
        }, 
        {
            "location": "/reference/#boolean", 
            "text": "", 
            "title": "boolean"
        }, 
        {
            "location": "/reference/#date", 
            "text": "", 
            "title": "date"
        }, 
        {
            "location": "/reference/#strings", 
            "text": "string [a]\nstring [a:b]\nstring {s1, ..., sn}", 
            "title": "strings"
        }, 
        {
            "location": "/reference/#collections", 
            "text": "", 
            "title": "Collections"
        }, 
        {
            "location": "/reference/#list", 
            "text": "", 
            "title": "list"
        }, 
        {
            "location": "/reference/#set", 
            "text": "", 
            "title": "set"
        }, 
        {
            "location": "/reference/#collection", 
            "text": "", 
            "title": "collection"
        }, 
        {
            "location": "/reference/#datasets", 
            "text": "", 
            "title": "Datasets"
        }, 
        {
            "location": "/reference/#record", 
            "text": "", 
            "title": "Record"
        }, 
        {
            "location": "/reference/#product", 
            "text": "", 
            "title": "Product"
        }, 
        {
            "location": "/reference/#function", 
            "text": "", 
            "title": "Function"
        }, 
        {
            "location": "/reference/#_1", 
            "text": "", 
            "title": "()"
        }, 
        {
            "location": "/reference/#join-expressions", 
            "text": "", 
            "title": "Join expressions"
        }, 
        {
            "location": "/reference/#inner-join", 
            "text": "innerJoin := [inner left, right] {\n    filter true\n}\n     \n     \nid[I,String],measure[M,String],attribute[A,String]\n3,left value 3, left attribute 3\n4,left value 4, left attribute 4\n5,left value 5, left attribute 5\n6,left value 6, left attribute 6\n     \n     \nid[I,String],measure[M,String],attribute[A,String]\n1,right value 1, right attribute 1\n2,right value 2, right attribute 2\n3,right value 3, right attribute 3\n4,right value 4, right attribute 4", 
            "title": "Inner join"
        }, 
        {
            "location": "/reference/#outer-join", 
            "text": "outerJoin := [outer left, right] {\n    filter true\n}\n     \n     \nid1[I,String],id2[I,String],measure[M,String],attribute[A,String]\n1,3,left value 3, left attribute 3\n1,4,left value 4, left attribute 4\n1,5,left value 5, left attribute 5\n1,6,left value 6, left attribute 6\n     \n     \nid1[I,String],id2[I,String],measure[M,String],attribute[A,String]\n1,1,right value 1, right attribute 1\n1,2,right value 2, right attribute 2\n1,3,right value 3, right attribute 3\n1,4,right value 4, right attribute 4", 
            "title": "Outer join"
        }, 
        {
            "location": "/reference/#fold-clause", 
            "text": "Fold transposes a single data point of the input Dataset into several\ndata points. It adds Identifier dim and measure msr to the resulting\nDataset, inserts into the resulting Dataset a data point for each value\nA in the element list and assigns to the inserted data point dim = A and\nmsr = value of measure A in the input Dataset.  When measure A is null then fold does not create a data point for that\nmeasure. Note that in general unfolding and folding are not exactly\nsymmetric operations, i.e. in some cases the fold operation applied to\nthe unfolded Dataset does not recreate exactly the original Dataset\n(before unfolding).  \n     \nfolded := [population] {\n    fold '0-14', '15-24', '25-64', '65+' to age, percent\n}\n     \n     \ncountry[I,String],0-14[M,String],15-24[M,String],25-64[M,String],65+[M,String]\nFrance ,18.1%,12.2%,51.0%,18.7%\nNorway ,18.6%,13.0%,52.0%,16.4%\nItaly  ,14.0%,9.8%,54.4%,21.7%\nSweden ,17.3%,12.2%,50.5%,20.0%", 
            "title": "Fold clause"
        }, 
        {
            "location": "/reference/#unfold", 
            "text": "folded := [colors] {\n    unfold color, wavelength to \"indigo\", \"blue\", \"yellow\"\n}\n     \n     \ncolor[I,String],wavelength[M,String]\nblue, 475nm\nindigo, 445nm\norange, 570nm\nred, 650nm\nviolet, 400 nm\nyellow, 510nm", 
            "title": "Unfold"
        }, 
        {
            "location": "/reference/#check-operators", 
            "text": "The check operators are used to validate data sets. Three check operator\n variants are available, check with rule sets, check with hierarchical\n rule sets and check with single boolean rule.  The return value of the check function depend of parameters.\nWhen used with the parameter \"condition\", the resulting dataset will only\n contain a condition measure of type Boolean indicating if the DataPoint\n is valid according to the rule set, hierarchical rule set or boolean\n expression.\nWith the parameter \"measures\", the resulting dataset contains all the\nmeasures of the input dataset.", 
            "title": "Check operators"
        }, 
        {
            "location": "/reference/#check-with-single-rule", 
            "text": "folded := check(data.valid   \"na\")\n     \n     \ncountry[I,String],population[M,String]\nFrance , 64M\nNorway , 5M\nItaly  , na\nSweden , 9M", 
            "title": "Check with single rule"
        }, 
        {
            "location": "/playground/", 
            "text": "", 
            "title": "Playground"
        }
    ]
}